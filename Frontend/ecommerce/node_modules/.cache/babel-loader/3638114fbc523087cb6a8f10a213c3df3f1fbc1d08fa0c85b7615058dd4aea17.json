{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      products: [],\n      // Lista de productos obtenidos del backend\n      searchQuery: \"\",\n      // Consulta de búsqueda del usuario\n      currentPage: 1,\n      // Página actual de la lista de productos\n      pageSize: 8,\n      // Tamaño de la página (máximo de productos por página)\n      cart: [] // Carrito de compras\n    };\n  },\n  created() {\n    // Obtener la lista completa de productos\n    axios.get(\"http://localhost:8080/products\").then(response => {\n      this.products = response.data;\n    }).catch(error => {\n      console.error(\"Error al obtener la lista de productos:\", error);\n    });\n  },\n  computed: {\n    // Filtrar los productos según la consulta de búsqueda\n    filteredProducts() {\n      return this.products.filter(product => product.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    },\n    // Calcular el número total de páginas basado en la lista completa de productos\n    totalPages() {\n      return Math.ceil(this.filteredProducts.length / this.pageSize);\n    },\n    // Obtener los productos para la página actual\n    currentPageProducts() {\n      const startIndex = (this.currentPage - 1) * this.pageSize;\n      return this.filteredProducts.slice(startIndex, startIndex + this.pageSize);\n    },\n    // Calcular el precio total del carrito\n    totalCartPrice() {\n      return this.cart.reduce((total, item) => total + item.quantity * item.price, 0);\n    }\n  },\n  watch: {\n    // Observar cambios en la consulta de búsqueda y volver a la página 1\n    searchQuery() {\n      this.currentPage = 1;\n    }\n  },\n  methods: {\n    // Cambiar a la página anterior\n    previousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    // Cambiar a la página siguiente\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    // Limpiar la consulta de búsqueda\n    clearSearch() {\n      this.searchQuery = \"\";\n    },\n    // Agregar un producto al carrito\n    addToCart(product) {\n      // Verificar si el producto ya está en el carrito\n      const existingProductIndex = this.cart.findIndex(item => item.id === product.id);\n      if (existingProductIndex !== -1) {\n        // Calcular la cantidad total del producto en el carrito\n        const totalQuantityInCart = this.cart.reduce((total, item) => {\n          if (item.id === product.id) {\n            return total + item.quantity;\n          }\n          return total;\n        }, 0);\n\n        // Verificar si la cantidad total en el carrito más la cantidad a agregar supera el stock disponible\n        if (totalQuantityInCart + 1 <= product.stock) {\n          this.cart[existingProductIndex].quantity++;\n        } else {\n          // Mostrar un mensaje de error si se ha alcanzado el stock máximo\n          alert(\"¡No puedes agregar más unidades de este producto al carrito! Has alcanzado el stock máximo.\");\n        }\n      } else {\n        // Si el producto no está en el carrito, agregarlo\n        this.cart.push({\n          ...product,\n          quantity: 1\n        });\n      }\n    },\n    // Método para aumentar la cantidad de un producto en el carrito\n    increaseQuantity(index) {\n      const product = this.cart[index];\n      // Verificar si la cantidad total en el carrito más la cantidad a agregar supera el stock disponible\n      if (product.quantity + 1 <= product.stock) {\n        product.quantity++;\n      } else {\n        // Mostrar un mensaje de error si se ha alcanzado el stock máximo\n        alert(\"¡No puedes agregar más unidades de este producto al carrito! Has alcanzado el stock máximo.\");\n      }\n    },\n    // Método para disminuir la cantidad de un producto en el carrito\n    decreaseQuantity(index) {\n      if (this.cart[index].quantity > 1) {\n        this.cart[index].quantity--;\n      }\n    },\n    // Método para eliminar un producto del carrito\n    removeFromCart(index) {\n      this.cart.splice(index, 1);\n    },\n    // Método para limpiar el carrito por completo\n    clearCart() {\n      this.cart = [];\n    },\n    // Método para realizar la compra\n    purchase() {\n      // Aquí puedes realizar alguna acción adicional, como enviar los productos al servidor para completar la compra\n      // Por ahora, simplemente limpiaremos el carrito\n      this.cart = [];\n      alert(\"¡Gracias por tu compra!\");\n    }\n  }\n};","map":{"version":3,"names":["axios","data","products","searchQuery","currentPage","pageSize","cart","created","get","then","response","catch","error","console","computed","filteredProducts","filter","product","name","toLowerCase","includes","totalPages","Math","ceil","length","currentPageProducts","startIndex","slice","totalCartPrice","reduce","total","item","quantity","price","watch","methods","previousPage","nextPage","clearSearch","addToCart","existingProductIndex","findIndex","id","totalQuantityInCart","stock","alert","push","increaseQuantity","index","decreaseQuantity","removeFromCart","splice","clearCart","purchase"],"sources":["C:\\Users\\leand\\Downloads\\ecommerce\\ecommerce\\src\\components\\ListaProductos.vue"],"sourcesContent":["<template>\r\n  <div class=\"products-container\" id=\"prd\">\r\n    <h1>Lista de Productos</h1>\r\n    <!-- Barra de búsqueda -->\r\n    <div class=\"search-container\">\r\n      <input\r\n        type=\"text\"\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"Buscar productos...\"\r\n        class=\"search-input\"\r\n      />\r\n      <button @click=\"clearSearch\" class=\"clear-button\">Limpiar</button>\r\n    </div>\r\n    <div class=\"product-list\">\r\n      <div\r\n        v-for=\"product in currentPageProducts\"\r\n        :key=\"product.id\"\r\n        class=\"product-card\"\r\n      >\r\n        <div class=\"img-container\">\r\n          <img :src=\"product.image\" alt=\"Product Image\" class=\"product-image\" />\r\n        </div>\r\n        <div class=\"product-details\">\r\n          <h2 class=\"product-name\">{{ product.name }}</h2>\r\n          <p class=\"product-description\">{{ product.description }}</p>\r\n          <p class=\"product-price\">$ {{ product.price }}</p>\r\n          <p class=\"product-stock\">Stock: {{ product.stock }}</p>\r\n          <button @click=\"addToCart(product)\" class=\"add-to-cart-button\">\r\n            Add to cart\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Controles de paginación -->\r\n    <div class=\"pagination\">\r\n      <button @click=\"previousPage\" :disabled=\"currentPage === 1\">\r\n        Anterior\r\n      </button>\r\n      <span>Página {{ currentPage }} de {{ totalPages }}</span>\r\n      <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">\r\n        Siguiente\r\n      </button>\r\n    </div>\r\n    <div class=\"cart-container\" id=\"cart\">\r\n      <h2>Carrito de compras</h2>\r\n      <div v-if=\"cart.length === 0\">\r\n        <p>The cart is empty</p>\r\n      </div>\r\n      <div v-else>\r\n        <div v-for=\"(item, index) in cart\" :key=\"index\" class=\"cart-item\">\r\n          <div class=\"cart-item-details\">\r\n            <p>{{ item.name }}</p>\r\n            <p>Cantidad: {{ item.quantity }}</p>\r\n            <p>Precio unitario: ${{ item.price }}</p>\r\n            <p>Total: ${{ item.quantity * item.price }}</p>\r\n          </div>\r\n          <div class=\"cart-item-actions\">\r\n            <button class=\"quantity-button\" @click=\"decreaseQuantity(index)\">\r\n              -\r\n            </button>\r\n            <button class=\"quantity-button\" @click=\"increaseQuantity(index)\">\r\n              +\r\n            </button>\r\n            <button class=\"remove-button\" @click=\"removeFromCart(index)\">\r\n              Eliminar\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <p>Total del carrito: ${{ totalCartPrice }}</p>\r\n        <button class=\"buy-button\" @click=\"purchase\">Comprar</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [], // Lista de productos obtenidos del backend\r\n      searchQuery: \"\", // Consulta de búsqueda del usuario\r\n      currentPage: 1, // Página actual de la lista de productos\r\n      pageSize: 8, // Tamaño de la página (máximo de productos por página)\r\n      cart: [], // Carrito de compras\r\n    };\r\n  },\r\n  created() {\r\n    // Obtener la lista completa de productos\r\n    axios\r\n      .get(\"http://localhost:8080/products\")\r\n      .then((response) => {\r\n        this.products = response.data;\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error al obtener la lista de productos:\", error);\r\n      });\r\n  },\r\n  computed: {\r\n    // Filtrar los productos según la consulta de búsqueda\r\n    filteredProducts() {\r\n      return this.products.filter((product) =>\r\n        product.name.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n    // Calcular el número total de páginas basado en la lista completa de productos\r\n    totalPages() {\r\n      return Math.ceil(this.filteredProducts.length / this.pageSize);\r\n    },\r\n    // Obtener los productos para la página actual\r\n    currentPageProducts() {\r\n      const startIndex = (this.currentPage - 1) * this.pageSize;\r\n      return this.filteredProducts.slice(\r\n        startIndex,\r\n        startIndex + this.pageSize\r\n      );\r\n    },\r\n    // Calcular el precio total del carrito\r\n    totalCartPrice() {\r\n      return this.cart.reduce(\r\n        (total, item) => total + item.quantity * item.price,\r\n        0\r\n      );\r\n    },\r\n  },\r\n  watch: {\r\n    // Observar cambios en la consulta de búsqueda y volver a la página 1\r\n    searchQuery() {\r\n      this.currentPage = 1;\r\n    },\r\n  },\r\n  methods: {\r\n    // Cambiar a la página anterior\r\n    previousPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    },\r\n    // Cambiar a la página siguiente\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n    // Limpiar la consulta de búsqueda\r\n    clearSearch() {\r\n      this.searchQuery = \"\";\r\n    },\r\n    // Agregar un producto al carrito\r\n    addToCart(product) {\r\n      // Verificar si el producto ya está en el carrito\r\n      const existingProductIndex = this.cart.findIndex(\r\n        (item) => item.id === product.id\r\n      );\r\n      if (existingProductIndex !== -1) {\r\n        // Calcular la cantidad total del producto en el carrito\r\n        const totalQuantityInCart = this.cart.reduce((total, item) => {\r\n          if (item.id === product.id) {\r\n            return total + item.quantity;\r\n          }\r\n          return total;\r\n        }, 0);\r\n\r\n        // Verificar si la cantidad total en el carrito más la cantidad a agregar supera el stock disponible\r\n        if (totalQuantityInCart + 1 <= product.stock) {\r\n          this.cart[existingProductIndex].quantity++;\r\n        } else {\r\n          // Mostrar un mensaje de error si se ha alcanzado el stock máximo\r\n          alert(\r\n            \"¡No puedes agregar más unidades de este producto al carrito! Has alcanzado el stock máximo.\"\r\n          );\r\n        }\r\n      } else {\r\n        // Si el producto no está en el carrito, agregarlo\r\n        this.cart.push({ ...product, quantity: 1 });\r\n      }\r\n    },\r\n    // Método para aumentar la cantidad de un producto en el carrito\r\n    increaseQuantity(index) {\r\n      const product = this.cart[index];\r\n      // Verificar si la cantidad total en el carrito más la cantidad a agregar supera el stock disponible\r\n      if (product.quantity + 1 <= product.stock) {\r\n        product.quantity++;\r\n      } else {\r\n        // Mostrar un mensaje de error si se ha alcanzado el stock máximo\r\n        alert(\r\n          \"¡No puedes agregar más unidades de este producto al carrito! Has alcanzado el stock máximo.\"\r\n        );\r\n      }\r\n    },\r\n    // Método para disminuir la cantidad de un producto en el carrito\r\n    decreaseQuantity(index) {\r\n      if (this.cart[index].quantity > 1) {\r\n        this.cart[index].quantity--;\r\n      }\r\n    },\r\n    // Método para eliminar un producto del carrito\r\n    removeFromCart(index) {\r\n      this.cart.splice(index, 1);\r\n    },\r\n    // Método para limpiar el carrito por completo\r\n    clearCart() {\r\n      this.cart = [];\r\n    },\r\n    // Método para realizar la compra\r\n    purchase() {\r\n      // Aquí puedes realizar alguna acción adicional, como enviar los productos al servidor para completar la compra\r\n      // Por ahora, simplemente limpiaremos el carrito\r\n      this.cart = [];\r\n      alert(\"¡Gracias por tu compra!\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n/* Estilos para la barra de búsqueda */\r\n.search-container {\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.search-input {\r\n  flex-grow: 1;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px 0 0 5px;\r\n}\r\n\r\n.clear-button {\r\n  background-color: #333;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 15px;\r\n  font-size: 14px;\r\n  border-radius: 0 5px 5px 0;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.clear-button:hover {\r\n  background-color: #03a044;\r\n}\r\n/* Estilos CSS específicos del componente */\r\n.products-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.product-list {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.product-card {\r\n  border: 1px solid #c7c6c6;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n}\r\n.img-container {\r\n  width: 100%;\r\n  height: 200px; /* Altura del contenedor de la imagen */\r\n  overflow: hidden;\r\n}\r\n.product-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.product-details {\r\n  padding: 15px;\r\n}\r\n\r\n.product-name {\r\n  font-size: 18px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.product-description {\r\n  font-size: 14px;\r\n  color: #d3d3d3;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.product-price {\r\n  font-size: 16px;\r\n  color: #03a044;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.product-stock {\r\n  font-size: 14px;\r\n  color: #777;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.add-to-cart-button {\r\n  background-color: #333;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 15px;\r\n  font-size: 14px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.add-to-cart-button:hover {\r\n  background-color: #03a044;\r\n}\r\n/* Estilos para la paginación */\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.pagination button {\r\n  background-color: #333;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 15px;\r\n  font-size: 14px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  margin: 0 5px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n.pagination button:hover {\r\n  background-color: #03a044;\r\n}\r\n\r\n.pagination button:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n/* Estilos para el carrito */\r\n.cart-container {\r\n  margin-top: 50px;\r\n}\r\n\r\n.cart-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  border-bottom: 1px solid #ccc;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.cart-item-actions button {\r\n  margin-left: 5px;\r\n}\r\n\r\n.cart-item-actions button:first-child {\r\n  margin-left: 0;\r\n}\r\n.quantity-button,\r\n.remove-button {\r\n  background-color: #03a044;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 15px;\r\n  font-size: 14px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.quantity-button:hover,\r\n.remove-button:hover {\r\n  background-color: #1cb85e;\r\n}\r\n\r\n.quantity-button {\r\n  margin-right: 5px;\r\n}\r\n\r\n.remove-button {\r\n  margin-left: 10px;\r\n}\r\n/* Estilos para el botón de comprar */\r\n.buy-button {\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-top: 20px;\r\n}\r\n\r\n.buy-button:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}